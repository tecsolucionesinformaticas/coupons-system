<?php
if (!class_exists('CS_Propuestas_List_Table')) {
    require_once ABSPATH . 'wp-admin/includes/class-wp-list-table.php';

    class CS_Propuestas_List_Table extends WP_List_Table {
        private $items_data;

        public function __construct() {
            parent::__construct([
                'singular' => 'propuesta',
                'plural'   => 'propuestas',
                'ajax'     => false,
            ]);
        }

        public function get_columns() {
            return [
                'cb'          => '<input type="checkbox" />',
                'id'          => 'ID',
                'comercio'    => 'Comercio',
                'nombre'      => 'Nombre',
                'emision'     => 'Emisión',
                'valor'       => 'Valor',
                'vencimiento' => 'Vencimiento',
                'estado'      => 'Estado',
                'creado_por'  => 'Creado por',
                'fecha'       => 'Fecha',
                'acciones'    => 'Acciones',
            ];
        }

        public function get_sortable_columns() {
            return [
                'id'          => ['id', true],
                'comercio'    => ['comercio_nombre', false],
                'nombre'      => ['nombre', false],
                'emision'     => ['cupones_por_ciclo', false],
                'valor'       => ['valor', false],
                'vencimiento' => ['duracion_validez', false],
                'estado'      => ['estado', false],
                'creado_por'  => ['creado_por', false],
                'fecha'       => ['created_at', false],
            ];
        }

        public function get_bulk_actions() {
            return [
                'approve' => 'Aprobar seleccionadas',
                'delete'  => 'Eliminar seleccionadas',
            ];
        }
		
		public function process_bulk_action() {
			error_log("Llega a process_bulk_action");
			cs_propuestas_mass_action_handler();
		}

        // Filtros encima de la tabla
        public function extra_tablenav($which) {
            if ($which !== 'top') return;
            $f_est   = $_GET['filtro_estado']   ?? '';
            $f_tipo  = $_GET['filtro_tipo']     ?? '';
            $f_com   = $_GET['filtro_comercio'] ?? '';

            $estados = [''=>'Todos','pendiente'=>'Pendiente','aprobado'=>'Aprobado','rechazado'=>'Rechazado'];
            $tipos   = [''=>'Todos','importe'=>'Importe','unidad'=>'Unidad'];

            global $wpdb;
            $users = $wpdb->get_results("SELECT ID,display_name FROM {$wpdb->users} ORDER by display_name");

			echo '<div class="alignleft actions" style="display: flex">';

			// Filtro Estado
			echo '<div style="display: flex; align-items: center; margin-right: 20px; flex-direction: row; inline-size: auto;">';
			echo '<label for="filtro_estado" style="margin-right: 5px;">Estado:</label>';
			echo '<select name="filtro_estado" id="filtro_estado" style="min-width: 120px;">';
			foreach ($estados as $v => $l) {
				printf('<option value="%s"%s>%s</option>',
					esc_attr($v), selected($f_est, $v, false), esc_html($l)
				);
			}
			echo '</select>';
			echo '</div>';

			// Filtro Tipo
			echo '<div style="display: flex; align-items: center; margin-right: 20px; flex-direction: row;">';
			echo '<label for="filtro_tipo" style="margin-right: 5px;">Tipo:</label>';
			echo '<select name="filtro_tipo" id="filtro_tipo" style="min-width: 120px;">';
			foreach ($tipos as $v => $l) {
				printf('<option value="%s"%s>%s</option>',
					esc_attr($v), selected($f_tipo, $v, false), esc_html($l)
				);
			}
			echo '</select>';
			echo '</div>';

			// Filtro Comercio
			echo '<div style="display: flex; align-items: center; margin-right: 20px; flex-direction: row;">';
			echo '<label for="filtro_comercio" style="margin-right: 5px;">Comercio:</label>';
			echo '<select name="filtro_comercio" id="filtro_comercio" style="min-width: 160px;">';
			echo '<option value="">Todos</option>';
			foreach ($users as $u) {
				printf('<option value="%d"%s>%s</option>',
					$u->ID, selected($f_com, $u->ID, false), esc_html($u->display_name)
				);
			}
			echo '</select>';
			echo '</div>';

			// Botón de Filtrado
			echo '<div style="display: inline-block; vertical-align: middle;">';
			submit_button('Filtrar', 'secondary', 'filtrar_action', false);
			echo '</div>';

			echo '</div>';
        }

        // Checkbox column
        public function column_cb($item) {
            return sprintf('<input type="checkbox" name="cs_ids[]" value="%s" />', $item->id);
        }

        // Actions column
        public function column_acciones($item) {
            $a = [];
            $a[] = sprintf('<a href="%s">Ver</a>',
                esc_url(admin_url("admin.php?page=cs_propuestas&action=view&id={$item->id}")));
            if ($item->estado==='pendiente' && cs_usuario_debe_aprobar_propuesta($item)) {
                $a[] = sprintf('<a href="%s">Aprobar</a>',
                    esc_url(admin_url("admin.php?page=cs_propuestas&action=approve&id={$item->id}")));
            }
            $a[] = sprintf('<a href="%s" class="cs-delete-link">Eliminar</a>',
                esc_url(admin_url("admin.php?page=cs_propuestas&action=delete&id={$item->id}")));
            return implode(' | ',$a);
        }

        // Nombre simplemente texto
        public function column_nombre($item) {
            return esc_html($item->nombre);
        }

        // Otras columnas
        public function column_default($item, $col) {
            switch($col) {
                case 'id':          return $item->id;
                case 'comercio':    return esc_html($item->comercio_nombre);
                case 'emision':     return esc_html(cs_formatear_cantidad_cupones(
                                        $item->cupones_por_ciclo,
                                        $item->frecuencia_emision,
                                        $item->unidad_frecuencia,
                                        $item->cantidad_ciclos
                                     ));
                case 'valor':
                    if ($item->tipo_cupon==='importe') {
                        return '$'.number_format($item->valor,2,',','.');
                    }
                    return esc_html(singularizar_si_es_necesario($item->valor,'unidades').' de '.($item->unidad_descripcion?:'—'));
                case 'vencimiento':
                    return esc_html(singularizar_si_es_necesario($item->duracion_validez,$item->unidad_validez));
                case 'estado':      return ucfirst($item->estado);
                case 'creado_por':
                    $u = get_user_by('id',$item->creado_por);
                    return esc_html($u?$u->display_name:'Desconocido');
                case 'fecha':       return esc_html($item->created_at);
                default:            return '';
            }
        }

        public function prepare_items() {
            global $wpdb;
            $table        = $wpdb->prefix.'coupon_proposals';
            $per_page     = 20;
            $current_page = $this->get_pagenum();
            $offset       = ($current_page-1)*$per_page;

            // Filtros dinámicos
            $where = []; $params = [];
            if(!empty($_GET['filtro_estado'])) {
                $where[]   = 'p.estado=%s';
                $params[]  = sanitize_text_field($_GET['filtro_estado']);
            }
            if(!empty($_GET['filtro_tipo'])) {
                $where[]   = 'p.tipo_cupon=%s';
                $params[]  = sanitize_text_field($_GET['filtro_tipo']);
            }
            if(!empty($_GET['filtro_comercio'])) {
                $where[]   = 'p.comercio_id=%d';
                $params[]  = intval($_GET['filtro_comercio']);
            }
            $where_sql = $where? 'WHERE '.implode(' AND ',$where):'';

            // Orden
            $sortables = array_keys($this->get_sortable_columns());
            $orderby   = in_array($_REQUEST['orderby']??'',$sortables)? sanitize_sql_orderby($_REQUEST['orderby']) : 'created_at';
            $order     = in_array(strtolower($_REQUEST['order']??''),['asc','desc'])? strtoupper($_REQUEST['order']) : 'DESC';

            // Total
            $total_sql = $wpdb->prepare("SELECT COUNT(*) FROM {$table} p {$where_sql}", ...$params);
            $total_items = intval($wpdb->get_var($total_sql));

            // Datos página
            $params[] = $per_page;
            $params[] = $offset;
            $sql = "
                SELECT p.*, u.display_name AS comercio_nombre
                FROM {$table} p
                LEFT JOIN {$wpdb->users} u ON p.comercio_id=u.ID
                {$where_sql}
                ORDER BY {$orderby} {$order}
                LIMIT %d OFFSET %d
            ";
            $this->items_data = $wpdb->get_results($wpdb->prepare($sql, ...$params));

            // Headers, items y paginación
            $this->_column_headers = [
                $this->get_columns(),
                [], // hidden
                $this->get_sortable_columns()
            ];
            $this->items = $this->items_data;
            $this->set_pagination_args([
                'total_items' => $total_items,
                'per_page'    => $per_page,
                'total_pages' => ceil($total_items/$per_page),
            ]);
        }
    }
}